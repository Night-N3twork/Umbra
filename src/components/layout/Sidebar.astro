---
import Logo from './Logo.astro';
import SearchBar from '../ui/SearchBar.astro';

interface Props {
  currentPage: string;
}

const { currentPage } = Astro.props;

const navItems = [
  { name: 'Home', path: '/', icon: 'home' },
  { name: 'Playlists', path: '/playlists', icon: 'playlist' },
  { name: 'Albums', path: '/albums', icon: 'album' },
  { name: 'Artists', path: '/artists', icon: 'artist' },
  { name: 'Import', path: '/import', icon: 'import' },
  { name: 'Settings', path: '/settings', icon: 'settings' }
];
---

<aside class="w-64 h-full bg-dark-800/70 backdrop-blur-md border-r border-dark-700 flex flex-col">
  <div class="p-4">
    <Logo />
  </div>
  
  <div class="px-4 mb-6">
    <SearchBar />
  </div>
  
  <nav class="flex-1 overflow-y-auto">
    <ul class="space-y-1 px-2">
      {navItems.map(item => (
        <li>
          <a 
            href={item.path}
            class={`flex items-center gap-3 px-4 py-3 rounded-lg text-sm font-medium transition-colors ${
              currentPage === item.name.toLowerCase() 
                ? 'bg-dark-700 text-primary' 
                : 'text-dark-300 hover:bg-dark-700/50 hover:text-dark-100'
            }`}
          >
            <span class={`icon-${item.icon}`}></span>
            {item.name}
          </a>
        </li>
      ))}
    </ul>
  </nav>
  
  <div class="p-4 border-t border-dark-700">
    <div class="text-xs text-dark-400">
      <div class="flex justify-between">
        <span>Library Stats</span>
        <span id="library-size">0 songs</span>
      </div>
      <div class="mt-1 flex justify-between">
        <span>Storage Used</span>
        <span id="storage-used">0 MB</span>
      </div>
    </div>
  </div>
</aside>

<style>
  /* Icon placeholders - these would be replaced with actual icons */
  [class^="icon-"] {
    display: inline-block;
    width: 20px;
    height: 20px;
    background-color: currentColor;
    mask-size: cover;
  }
  
  .icon-home {
    mask-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath d='M12 2L2 12h3v8h14v-8h3L12 2zm0 18h-4v-6h8v6h-4z'/%3E%3C/svg%3E");
  }
  
  .icon-playlist {
    mask-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath d='M4 6h16v2H4zm0 5h16v2H4zm0 5h11v2H4z'/%3E%3C/svg%3E");
  }
  
  .icon-album {
    mask-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath d='M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 14.5c-2.49 0-4.5-2.01-4.5-4.5S9.51 7.5 12 7.5s4.5 2.01 4.5 4.5-2.01 4.5-4.5 4.5zm0-5.5c-.55 0-1 .45-1 1s.45 1 1 1 1-.45 1-1-.45-1-1-1z'/%3E%3C/svg%3E");
  }
  
  .icon-artist {
    mask-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath d='M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z'/%3E%3C/svg%3E");
  }
  
  .icon-import {
    mask-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath d='M9 16h6v-6h4l-7-7-7 7h4zm-4 2h14v2H5z'/%3E%3C/svg%3E");
  }
  
  .icon-settings {
    mask-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath d='M19.14 12.94c.04-.3.06-.61.06-.94 0-.32-.02-.64-.07-.94l2.03-1.58c.18-.14.23-.41.12-.61l-1.92-3.32c-.12-.22-.37-.29-.59-.22l-2.39.96c-.5-.38-1.03-.7-1.62-.94l-.36-2.54c-.04-.24-.24-.41-.48-.41h-3.84c-.24 0-.43.17-.47.41l-.36 2.54c-.59.24-1.13.57-1.62.94l-2.39-.96c-.22-.08-.47 0-.59.22L2.74 8.87c-.12.21-.08.47.12.61l2.03 1.58c-.05.3-.09.63-.09.94s.02.64.07.94l-2.03 1.58c-.18.14-.23.41-.12.61l1.92 3.32c.12.22.37.29.59.22l2.39-.96c.5.38 1.03.7 1.62.94l.36 2.54c.05.24.24.41.48.41h3.84c.24 0 .44-.17.47-.41l.36-2.54c.59-.24 1.13-.56 1.62-.94l2.39.96c.22.08.47 0 .59-.22l1.92-3.32c.12-.22.07-.47-.12-.61l-2.01-1.58zM12 15.6c-1.98 0-3.6-1.62-3.6-3.6s1.62-3.6 3.6-3.6 3.6 1.62 3.6 3.6-1.62 3.6-3.6 3.6z'/%3E%3C/svg%3E");
  }
</style>

<script>
  // Update library stats
  import { getLibraryStats } from '../../scripts/db';
  
  async function updateLibraryStats() {
    try {
      const stats = await getLibraryStats();
      const librarySize = document.getElementById('library-size');
      const storageUsed = document.getElementById('storage-used');
      
      if (librarySize) librarySize.textContent = `${stats.songCount} songs`;
      if (storageUsed) storageUsed.textContent = `${stats.storageUsed}`;
    } catch (error) {
      console.error('Failed to update library stats:', error);
    }
  }
  
  // Initial update
  updateLibraryStats();
  
  // Listen for library changes
  window.addEventListener('libraryUpdated', updateLibraryStats);
</script>