---
interface Artist {
  id: string;
  name: string;
  image?: string;
  songCount: number;
  albumCount: number;
}

interface Props {
  artists?: Artist[];
  title?: string;
}

const { artists = [], title = "Artists" } = Astro.props;
---

<div class="mb-8">
  <h2 class="text-2xl font-bold mb-4">{title}</h2>
  
  {artists.length > 0 ? (
    <div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 gap-6">
      {artists.map(artist => (
        <a href={`/artists/${artist.id}`} class="group">
          <div class="aspect-square bg-dark-700 rounded-full overflow-hidden relative group-hover:shadow-lg group-hover:shadow-primary/5 transition duration-300">
            {artist.image ? (
              <img src={artist.image} alt={artist.name} class="w-full h-full object-cover transition duration-300 group-hover:scale-105" />
            ) : (
              <div class="w-full h-full flex items-center justify-center text-dark-500">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                </svg>
              </div>
            )}
            <div class="absolute inset-0 bg-gradient-to-t from-dark-900/80 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
            <div class="absolute bottom-0 left-0 right-0 p-3 text-white transform translate-y-2 opacity-0 group-hover:translate-y-0 group-hover:opacity-100 transition duration-300">
              <button class="w-12 h-12 bg-primary rounded-full flex items-center justify-center absolute -top-6 right-3 shadow-lg">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" />
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              </button>
            </div>
          </div>
          <div class="mt-2 text-center">
            <h3 class="font-medium text-dark-100 truncate">{artist.name}</h3>
            <p class="text-sm text-dark-400 truncate">
              {artist.albumCount} {artist.albumCount === 1 ? 'album' : 'albums'} â€¢ {artist.songCount} {artist.songCount === 1 ? 'song' : 'songs'}
            </p>
          </div>
        </a>
      ))}
    </div>
  ) : (
    <div class="text-center py-12 text-dark-400 bg-dark-800/30 rounded-lg">
      <div class="mb-4">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mx-auto" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
        </svg>
      </div>
      <p class="text-lg font-medium">No artists found</p>
      <p class="mt-2">Import music to see artists here</p>
    </div>
  )}
</div>

<script>
  import { playArtist } from '../../scripts/player';
  
  // Add play functionality to artist play buttons
  document.querySelectorAll('.aspect-square button').forEach(button => {
    button.addEventListener('click', async (e) => {
      e.preventDefault();
      e.stopPropagation();
      
      const artistLink = button.closest('a');
      if (artistLink) {
        const artistId = artistLink.getAttribute('href').split('/').pop();
        if (artistId) {
          await playArtist(artistId);
        }
      }
    });
  });
</script>