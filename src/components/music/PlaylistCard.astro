---
interface Playlist {
  id: string;
  name: string;
  description?: string;
  songCount: number;
  artworks?: string[];
}

interface Props {
  playlists?: Playlist[];
  title?: string;
  showCreateButton?: boolean;
}

const { 
  playlists = [], 
  title = "Playlists",
  showCreateButton = true
} = Astro.props;
---

<div class="mb-8">
  <div class="flex justify-between items-center mb-4">
    <h2 class="text-2xl font-bold">{title}</h2>
    {showCreateButton && (
      <button id="create-playlist" class="bg-dark-700 hover:bg-dark-600 text-dark-100 rounded-full py-2 px-4 text-sm flex items-center gap-2 transition">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
          <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd" />
        </svg>
        New Playlist
      </button>
    )}
  </div>
  
  {playlists.length > 0 ? (
    <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
      {playlists.map(playlist => (
        <a href={`/playlists/${playlist.id}`} class="group">
          <div class="aspect-square bg-dark-700 rounded-md overflow-hidden relative group-hover:shadow-lg group-hover:shadow-primary/5 transition duration-300">
            {playlist.artworks && playlist.artworks.length > 0 ? (
              <div class="w-full h-full grid grid-cols-2 grid-rows-2">
                {playlist.artworks.slice(0, 4).map((artwork, index) => (
                  <div class="overflow-hidden">
                    <img src={artwork} alt="" class="w-full h-full object-cover transition duration-300 group-hover:scale-105" />
                  </div>
                ))}
                
                {/* Fill empty spots if less than 4 artworks */}
                {Array.from({ length: Math.max(0, 4 - playlist.artworks.length) }).map(() => (
                  <div class="bg-dark-600"></div>
                ))}
              </div>
            ) : (
              <div class="w-full h-full flex items-center justify-center bg-gradient-to-br from-primary/20 to-secondary/20 text-dark-300">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19V6l12-3v13M9 19c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zm12-3c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zM9 10l12-3" />
                </svg>
              </div>
            )}
            <div class="absolute inset-0 bg-gradient-to-t from-dark-900/80 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
            <div class="absolute bottom-0 left-0 right-0 p-3 text-white transform translate-y-2 opacity-0 group-hover:translate-y-0 group-hover:opacity-100 transition duration-300">
              <button class="w-12 h-12 bg-primary rounded-full flex items-center justify-center absolute -top-6 right-3 shadow-lg">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" />
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              </button>
            </div>
          </div>
          <div class="mt-2">
            <h3 class="font-medium text-dark-100 truncate">{playlist.name}</h3>
            <p class="text-sm text-dark-400 truncate">
              {playlist.songCount} {playlist.songCount === 1 ? 'song' : 'songs'}
            </p>
          </div>
        </a>
      ))}
    </div>
  ) : (
    <div class="text-center py-12 text-dark-400 bg-dark-800/30 rounded-lg">
      <div class="mb-4">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mx-auto" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
        </svg>
      </div>
      <p class="text-lg font-medium">No playlists found</p>
      <p class="mt-2">Create your first playlist to get started</p>
      <button id="create-playlist-empty" class="mt-4 inline-flex items-center gap-2 bg-primary hover:bg-primary/90 text-white rounded-full py-2 px-4">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
          <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd" />
        </svg>
        Create Playlist
      </button>
    </div>
  )}
</div>

<script>
  import { createPlaylist, getPlaylists } from '../../scripts/db';
  import { playPlaylist } from '../../scripts/player';
  
  // Create new playlist
  function setupCreatePlaylistButtons() {
    const createButtons = document.querySelectorAll('#create-playlist, #create-playlist-empty');
    
    createButtons.forEach(button => {
      button.addEventListener('click', async () => {
        const playlistName = prompt('Enter playlist name:');
        if (playlistName) {
          try {
            await createPlaylist(playlistName);
            // Refresh the page or playlist list
            window.location.reload();
          } catch (error) {
            console.error('Failed to create playlist:', error);
            alert('Failed to create playlist. Please try again.');
          }
        }
      });
    });
  }
  
  // Add play functionality to playlist play buttons
  function setupPlayButtons() {
    document.querySelectorAll('.aspect-square button').forEach(button => {
      button.addEventListener('click', async (e) => {
        e.preventDefault();
        e.stopPropagation();
        
        const playlistLink = button.closest('a');
        if (playlistLink) {
          const playlistId = playlistLink.getAttribute('href').split('/').pop();
          if (playlistId) {
            await playPlaylist(playlistId);
          }
        }
      });
    });
  }
  
  // Initialize buttons
  document.addEventListener('DOMContentLoaded', () => {
    setupCreatePlaylistButtons();
    setupPlayButtons();
  });
</script>