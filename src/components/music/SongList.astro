---
interface Song {
  id: string;
  title: string;
  artist: string;
  album: string;
  duration: number;
  artwork?: string;
}

interface Props {
  songs?: Song[];
  showHeader?: boolean;
  showAlbum?: boolean;
  isCompact?: boolean;
}

const { 
  songs = [], 
  showHeader = true, 
  showAlbum = true,
  isCompact = false
} = Astro.props;

// Helper function to format time
function formatTime(seconds: number): string {
  const mins = Math.floor(seconds / 60);
  const secs = Math.floor(seconds % 60);
  return `${mins}:${secs.toString().padStart(2, '0')}`;
}
---

<div class="w-full">
  {showHeader && (
    <div class="grid grid-cols-12 gap-4 px-4 py-2 text-dark-400 text-sm border-b border-dark-700 sticky top-0 bg-dark-800/50 backdrop-blur-sm">
      <div class="col-span-1">#</div>
      <div class="col-span-5">Title</div>
      {showAlbum && <div class="col-span-3">Album</div>}
      <div class={`col-span-${showAlbum ? 2 : 5}`}>Artist</div>
      <div class="col-span-1 text-right">Duration</div>
    </div>
  )}
  
  <div id="song-list" class={`${isCompact ? 'max-h-96 overflow-y-auto' : ''}`}>
    {songs.length > 0 ? (
      songs.map((song, index) => (
        <div 
          class="song-item grid grid-cols-12 gap-4 px-4 py-3 text-sm hover:bg-dark-700/50 rounded-md cursor-pointer group transition-colors"
          data-song-id={song.id}
        >
          <div class="col-span-1 flex items-center text-dark-400">
            <span class="group-hover:hidden">{index + 1}</span>
            <span class="hidden group-hover:block text-primary">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z" clip-rule="evenodd" />
              </svg>
            </span>
          </div>
          <div class="col-span-5 flex items-center gap-3 truncate">
            <div class="w-10 h-10 bg-dark-700 rounded overflow-hidden flex-shrink-0">
              {song.artwork ? (
                <img src={song.artwork} alt={song.title} class="w-full h-full object-cover" />
              ) : (
                <div class="w-full h-full flex items-center justify-center text-dark-500">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19V6l12-3v13M9 19c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zm12-3c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zM9 10l12-3" />
                  </svg>
                </div>
              )}
            </div>
            <div class="truncate">
              <div class="font-medium truncate">{song.title}</div>
            </div>
          </div>
          {showAlbum && (
            <div class="col-span-3 flex items-center truncate text-dark-300">
              {song.album}
            </div>
          )}
          <div class={`col-span-${showAlbum ? 2 : 5} flex items-center truncate text-dark-300`}>
            {song.artist}
          </div>
          <div class="col-span-1 flex items-center justify-end text-dark-400">
            <div class="group-hover:hidden">{formatTime(song.duration)}</div>
            <div class="hidden group-hover:flex gap-1">
              <button class="text-dark-300 hover:text-primary btn-more">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                  <path d="M10 6a2 2 0 110-4 2 2 0 010 4zM10 12a2 2 0 110-4 2 2 0 010 4zM10 18a2 2 0 110-4 2 2 0 010 4z" />
                </svg>
              </button>
            </div>
          </div>
        </div>
      ))
    ) : (
      <div class="text-center py-16 text-dark-400">
        <div class="mb-4">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-10 w-10 mx-auto" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19V6l12-3v13M9 19c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zm12-3c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zM9 10l12-3" />
          </svg>
        </div>
        <p>No songs found</p>
      </div>
    )}
  </div>
</div>

<div id="context-menu" class="fixed hidden z-50 min-w-40 bg-dark-800 border border-dark-700 rounded-lg shadow-xl p-1">
  <ul class="text-sm">
    <li>
      <button class="w-full text-left px-3 py-2 rounded hover:bg-dark-700 flex items-center gap-2">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
          <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z" clip-rule="evenodd" />
        </svg>
        Play
      </button>
    </li>
    <li>
      <button class="w-full text-left px-3 py-2 rounded hover:bg-dark-700 flex items-center gap-2">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
          <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-11a1 1 0 10-2 0v2H7a1 1 0 100 2h2v2a1 1 0 102 0v-2h2a1 1 0 100-2h-2V7z" clip-rule="evenodd" />
        </svg>
        Add to queue
      </button>
    </li>
    <li class="relative playlist-dropdown">
      <button class="w-full text-left px-3 py-2 rounded hover:bg-dark-700 flex items-center justify-between gap-2">
        <span class="flex items-center gap-2">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
          </svg>
          Add to playlist
        </span>
        <span>
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
          </svg>
        </span>
      </button>
      <div class="absolute left-full top-0 hidden playlist-submenu ml-1 min-w-40 bg-dark-800 border border-dark-700 rounded-lg shadow-xl p-1">
        <ul id="playlist-list" class="max-h-40 overflow-y-auto">
          <!-- Playlists will be populated here -->
          <li>
            <button class="w-full text-left px-3 py-2 rounded hover:bg-dark-700">
              My Playlist 1
            </button>
          </li>
          <li>
            <button class="w-full text-left px-3 py-2 rounded hover:bg-dark-700">
              My Playlist 2
            </button>
          </li>
          <li class="border-t border-dark-700 mt-1 pt-1">
            <button class="w-full text-left px-3 py-2 rounded hover:bg-dark-700 text-primary flex items-center gap-2">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-11a1 1 0 10-2 0v2H7a1 1 0 100 2h2v2a1 1 0 102 0v-2h2a1 1 0 100-2h-2V7z" clip-rule="evenodd" />
              </svg>
              Create new playlist
            </button>
          </li>
        </ul>
      </div>
    </li>
    <li class="border-t border-dark-700 mt-1 pt-1">
      <button class="w-full text-left px-3 py-2 rounded hover:bg-dark-700 flex items-center gap-2">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
        </svg>
        Download
      </button>
    </li>
    <li>
      <button class="w-full text-left px-3 py-2 rounded hover:bg-dark-700 text-red-500 flex items-center gap-2">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
        </svg>
        Remove from library
      </button>
    </li>
  </ul>
</div>

<script>
  import { playTrack, addToQueue, addToPlaylist, downloadSong, deleteSong } from '../../scripts/player';
  import { getPlaylists, createPlaylist } from '../../scripts/db';
  
  // Context menu functionality
  let currentSongId = null;
  const contextMenu = document.getElementById('context-menu');
  const playlistDropdown = document.querySelector('.playlist-dropdown');
  const playlistSubmenu = document.querySelector('.playlist-submenu');
  const playlistList = document.getElementById('playlist-list');
  
  // Handle right-click on song items
  document.querySelectorAll('.song-item').forEach(item => {
    item.addEventListener('contextmenu', (e) => {
      e.preventDefault();
      
      // Hide any open context menus
      if (contextMenu) {
        contextMenu.style.display = 'none';
        if (playlistSubmenu) playlistSubmenu.classList.add('hidden');
      }
      
      // Get song ID
      currentSongId = item.getAttribute('data-song-id');
      
      // Position and show context menu
      if (contextMenu) {
        contextMenu.style.left = `${e.pageX}px`;
        contextMenu.style.top = `${e.pageY}px`;
        contextMenu.style.display = 'block';
        
        // Update playlist submenu
        updatePlaylistSubmenu();
      }
    });
  });
  
  // Show/hide playlist submenu
  if (playlistDropdown) {
    playlistDropdown.addEventListener('mouseenter', () => {
      if (playlistSubmenu) playlistSubmenu.classList.remove('hidden');
    });
    
    playlistDropdown.addEventListener('mouseleave', () => {
      if (playlistSubmenu) playlistSubmenu.classList.add('hidden');
    });
  }
  
  // Update playlist submenu with available playlists
  async function updatePlaylistSubmenu() {
    if (!playlistList) return;
    
    try {
      const playlists = await getPlaylists();
      
      // Clear existing playlists
      const createPlaylistBtn = playlistList.querySelector('li:last-child');
      playlistList.innerHTML = '';
      
      // Add playlists
      playlists.forEach(playlist => {
        const li = document.createElement('li');
        const button = document.createElement('button');
        button.className = 'w-full text-left px-3 py-2 rounded hover:bg-dark-700';
        button.textContent = playlist.name;
        button.addEventListener('click', () => {
          if (currentSongId) {
            addToPlaylist(currentSongId, playlist.id);
            hideContextMenu();
          }
        });
        li.appendChild(button);
        playlistList.appendChild(li);
      });
      
      // Add separator and create new playlist button
      const separator = document.createElement('li');
      separator.className = 'border-t border-dark-700 mt-1 pt-1';
      
      const createBtn = document.createElement('button');
      createBtn.className = 'w-full text-left px-3 py-2 rounded hover:bg-dark-700 text-primary flex items-center gap-2';
      createBtn.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
          <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-11a1 1 0 10-2 0v2H7a1 1 0 100 2h2v2a1 1 0 102 0v-2h2a1 1 0 100-2h-2V7z" clip-rule="evenodd" />
        </svg>
        Create new playlist
      `;
      createBtn.addEventListener('click', async () => {
        const playlistName = prompt('Enter playlist name:');
        if (playlistName) {
          const playlistId = await createPlaylist(playlistName);
          if (currentSongId && playlistId) {
            addToPlaylist(currentSongId, playlistId);
          }
          hideContextMenu();
        }
      });
      
      separator.appendChild(createBtn);
      playlistList.appendChild(separator);
    } catch (error) {
      console.error('Failed to load playlists:', error);
    }
  }
  
  // Hide context menu on click outside
  document.addEventListener('click', (e) => {
    hideContextMenu();
  });
  
  function hideContextMenu() {
    if (contextMenu) {
      contextMenu.style.display = 'none';
      if (playlistSubmenu) playlistSubmenu.classList.add('hidden');
    }
  }
  
  // Play song on click
  document.querySelectorAll('.song-item').forEach(item => {
    item.addEventListener('click', async () => {
      const songId = item.getAttribute('data-song-id');
      if (songId) {
        await playTrack(songId);
      }
    });
  });
  
  // Context menu button actions
  if (contextMenu) {
    // Play button
    const playBtn = contextMenu.querySelector('button:nth-child(1)');
    if (playBtn) {
      playBtn.addEventListener('click', () => {
        if (currentSongId) {
          playTrack(currentSongId);
          hideContextMenu();
        }
      });
    }
    
    // Add to queue button
    const queueBtn = contextMenu.querySelector('button:nth-child(2)');
    if (queueBtn) {
      queueBtn.addEventListener('click', () => {
        if (currentSongId) {
          addToQueue(currentSongId);
          hideContextMenu();
        }
      });
    }
    
    // Download button
    const downloadBtn = contextMenu.querySelector('button:nth-child(4)');
    if (downloadBtn) {
      downloadBtn.addEventListener('click', () => {
        if (currentSongId) {
          downloadSong(currentSongId);
          hideContextMenu();
        }
      });
    }
    
    // Remove from library button
    const removeBtn = contextMenu.querySelector('button:nth-child(5)');
    if (removeBtn) {
      removeBtn.addEventListener('click', async () => {
        if (currentSongId) {
          if (confirm('Are you sure you want to remove this song from your library?')) {
            await deleteSong(currentSongId);
            // Refresh song list
            document.dispatchEvent(new CustomEvent('refreshSongList'));
          }
          hideContextMenu();
        }
      });
    }
  }
  
  // Refresh song list when library is updated
  document.addEventListener('libraryUpdated', async () => {
    document.dispatchEvent(new CustomEvent('refreshSongList'));
  });
</script>