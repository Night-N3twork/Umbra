<div id="music-player" class="w-full bg-dark-800/90 backdrop-blur-lg border-t border-dark-700 p-4">
  <div class="grid grid-cols-3 items-center gap-4">
    <!-- Now playing info -->
    <div class="flex items-center gap-3">
      <div class="relative">
        <img 
          id="current-artwork" 
          src="/default-artwork.jpg" 
          alt="Album artwork" 
          class="w-14 h-14 rounded-md object-cover album-rotate"
          onerror="this.src='/default-artwork.jpg'"
        />
      </div>
      <div class="truncate">
        <h4 id="current-title" class="text-sm font-medium truncate">Not Playing</h4>
        <p id="current-artist" class="text-xs text-dark-400 truncate">Select a song</p>
      </div>
      <button id="btn-favorite" class="text-dark-400 hover:text-primary">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
        </svg>
      </button>
    </div>
    
    <!-- Playback controls -->
    <div class="flex flex-col items-center gap-2">
      <div class="flex items-center gap-3">
        <button id="btn-shuffle" class="text-dark-400 hover:text-dark-100">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd" />
          </svg>
        </button>
        <button id="btn-prev" class="text-dark-100 hover:text-primary transition">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
          </svg>
        </button>
        <button id="btn-play" class="bg-primary hover:bg-primary/90 text-white rounded-full w-10 h-10 flex items-center justify-center transition">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z" clip-rule="evenodd" />
          </svg>
        </button>
        <button id="btn-next" class="text-dark-100 hover:text-primary transition">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
          </svg>
        </button>
        <button id="btn-repeat" class="text-dark-400 hover:text-dark-100">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z" clip-rule="evenodd" />
          </svg>
        </button>
      </div>
      
      <!-- Progress bar -->
      <div class="w-full flex items-center gap-2">
        <span id="current-time" class="text-xs text-dark-400 w-10 text-right">0:00</span>
        <div class="relative flex-1 h-1 bg-dark-600 rounded-full overflow-hidden">
          <div id="progress-bar" class="absolute left-0 top-0 h-full bg-primary" style="width: 0%"></div>
          <input 
            type="range" 
            id="seek-slider" 
            min="0" 
            max="100" 
            value="0" 
            class="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
          />
        </div>
        <span id="duration" class="text-xs text-dark-400 w-10">0:00</span>
      </div>
    </div>
    
    <!-- Volume and other controls -->
    <div class="flex justify-end items-center gap-3">
      <div class="flex items-center gap-2 w-32">
        <button id="btn-mute" class="text-dark-400 hover:text-dark-100">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.536 8.464a5 5 0 010 7.072m2.828-9.9a9 9 0 010 12.728M5.586 15H4a1 1 0 01-1-1v-4a1 1 0 011-1h1.586l4.707-4.707C10.923 3.663 12 4.109 12 5v14c0 .891-1.077 1.337-1.707.707L5.586 15z" />
          </svg>
        </button>
        <div class="relative flex-1 h-1 bg-dark-600 rounded-full overflow-hidden">
          <div id="volume-level" class="absolute left-0 top-0 h-full bg-dark-400" style="width: 70%"></div>
          <input 
            type="range" 
            id="volume-slider" 
            min="0" 
            max="100" 
            value="70" 
            class="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
          />
        </div>
      </div>
      <button id="btn-queue" class="text-dark-400 hover:text-dark-100">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 10h16M4 14h16M4 18h16" />
        </svg>
      </button>
    </div>
  </div>
</div>

<script>
  import { playTrack, pauseTrack, resumeTrack, seekTo, nextTrack, previousTrack, toggleRepeat, toggleShuffle } from '../../scripts/player';

  // Audio controls
  const playBtn = document.getElementById('btn-play');
  const prevBtn = document.getElementById('btn-prev');
  const nextBtn = document.getElementById('btn-next');
  const shuffleBtn = document.getElementById('btn-shuffle');
  const repeatBtn = document.getElementById('btn-repeat');
  const seekSlider = document.getElementById('seek-slider') as HTMLInputElement;
  const volumeSlider = document.getElementById('volume-slider') as HTMLInputElement;
  const progressBar = document.getElementById('progress-bar');
  const volumeLevel = document.getElementById('volume-level');
  const currentTimeDisplay = document.getElementById('current-time');
  const durationDisplay = document.getElementById('duration');
  const currentArtwork = document.getElementById('current-artwork') as HTMLImageElement;
  const currentTitle = document.getElementById('current-title');
  const currentArtist = document.getElementById('current-artist');
  
  // Update UI based on player state
  function updatePlayerUI(playerState) {
    if (!playerState) return;
    
    // Update song info
    if (currentTitle) currentTitle.textContent = playerState.title || 'Unknown Title';
    if (currentArtist) currentArtist.textContent = playerState.artist || 'Unknown Artist';
    if (currentArtwork) {
      currentArtwork.src = playerState.artwork || '/default-artwork.jpg';
      if (playerState.isPlaying) {
        currentArtwork.classList.add('playing');
      } else {
        currentArtwork.classList.remove('playing');
      }
    }
    
    // Update play button icon
    if (playBtn) {
      playBtn.innerHTML = playerState.isPlaying 
        ? `<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
             <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zM7 8a1 1 0 012 0v4a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v4a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
           </svg>`
        : `<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
             <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z" clip-rule="evenodd" />
           </svg>`;
    }
    
    // Update time displays
    if (currentTimeDisplay) {
      currentTimeDisplay.textContent = formatTime(playerState.currentTime);
    }
    if (durationDisplay) {
      durationDisplay.textContent = formatTime(playerState.duration);
    }
    
    // Update progress bar
    if (progressBar && playerState.duration > 0) {
      const progress = (playerState.currentTime / playerState.duration) * 100;
      progressBar.style.width = `${progress}%`;
      if (seekSlider) seekSlider.value = progress.toString();
    }
    
    // Update repeat and shuffle buttons
    if (shuffleBtn) {
      shuffleBtn.classList.toggle('text-primary', playerState.shuffleEnabled);
      shuffleBtn.classList.toggle('text-dark-400', !playerState.shuffleEnabled);
    }
    
    if (repeatBtn) {
      repeatBtn.classList.toggle('text-primary', playerState.repeatEnabled);
      repeatBtn.classList.toggle('text-dark-400', !playerState.repeatEnabled);
    }
  }
  
  // Helper function to format time
  function formatTime(seconds) {
    if (isNaN(seconds) || seconds < 0) return '0:00';
    const mins = Math.floor(seconds / 60);
    const secs = Math.floor(seconds % 60);
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  }
  
  // Event listeners
  if (playBtn) {
    playBtn.addEventListener('click', async () => {
      const playerState = await window.musicPlayer.togglePlay();
      updatePlayerUI(playerState);
    });
  }
  
  if (prevBtn) {
    prevBtn.addEventListener('click', async () => {
      const playerState = await previousTrack();
      updatePlayerUI(playerState);
    });
  }
  
  if (nextBtn) {
    nextBtn.addEventListener('click', async () => {
      const playerState = await nextTrack();
      updatePlayerUI(playerState);
    });
  }
  
  if (shuffleBtn) {
    shuffleBtn.addEventListener('click', async () => {
      const playerState = await toggleShuffle();
      updatePlayerUI(playerState);
    });
  }
  
  if (repeatBtn) {
    repeatBtn.addEventListener('click', async () => {
      const playerState = await toggleRepeat();
      updatePlayerUI(playerState);
    });
  }
  
  if (seekSlider) {
    seekSlider.addEventListener('input', () => {
      const seekValue = parseFloat(seekSlider.value);
      if (progressBar) progressBar.style.width = `${seekValue}%`;
    });
    
    seekSlider.addEventListener('change', async () => {
      const seekValue = parseFloat(seekSlider.value);
      const playerState = await seekTo(seekValue / 100);
      updatePlayerUI(playerState);
    });
  }
  
  if (volumeSlider) {
    volumeSlider.addEventListener('input', () => {
      const volume = parseFloat(volumeSlider.value);
      if (volumeLevel) volumeLevel.style.width = `${volume}%`;
      window.musicPlayer.setVolume(volume / 100);
    });
  }
  
  // Listen for player state updates
  window.addEventListener('playerStateChanged', (e) => {
    updatePlayerUI(e.detail);
  });
  
  // Initial player state update
  document.addEventListener('DOMContentLoaded', async () => {
    const playerState = await window.musicPlayer.getState();
    updatePlayerUI(playerState);
  });
</script>